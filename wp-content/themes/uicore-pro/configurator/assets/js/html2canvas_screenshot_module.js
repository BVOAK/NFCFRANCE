/**
 * Module de capture HTML2Canvas pour configurateur NFC France
 * Capture la vraie zone d'aper√ßu pour cr√©er des screenshots fid√®les
 */

if (typeof window.NFCScreenshotCapture === 'undefined') {
    window.NFCScreenshotCapture = class NFCScreenshotCapture {
        constructor(configurator) {
            this.configurator = configurator;
            this.previewSelector = '.preview-column'; // Zone d'aper√ßu √† capturer
            this.isLoaded = false;

            console.log('üì∏ NFCScreenshotCapture initialis√©');
        }

        /**
         * Initialisation - Charge html2canvas si n√©cessaire
         */
        async init() {
            console.log('üîÑ Chargement HTML2Canvas...');

            try {
                // V√©rifier si html2canvas est d√©j√† charg√©
                if (typeof html2canvas === 'undefined') {
                    await this.loadHtml2Canvas();
                }

                this.isLoaded = true;
                console.log('‚úÖ HTML2Canvas pr√™t pour capture');
            } catch (error) {
                console.error('‚ùå Erreur chargement HTML2Canvas:', error);
                throw error;
            }
        }

        /**
         * Charge html2canvas depuis CDN
         */
        async loadHtml2Canvas() {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';
                script.onload = () => {
                    console.log('üì¶ HTML2Canvas charg√© depuis CDN');
                    resolve();
                };
                script.onerror = () => {
                    console.error('‚ùå Erreur chargement HTML2Canvas CDN');
                    reject(new Error('Impossible de charger HTML2Canvas'));
                };
                document.head.appendChild(script);
            });
        }

        /**
         * G√©n√®re un screenshot haute r√©solution de la zone d'aper√ßu
         */
        async generateScreenshot() {
            if (!this.initialized) {
                throw new Error('Module non initialis√©. Appelez init() d\'abord.');
            }

            console.log('üì∏ G√©n√©ration screenshot avec correctifs...');

            // Trouver la zone d'aper√ßu
            const previewElement = document.querySelector(this.previewSelector);
            if (!previewElement) {
                console.error('‚ùå Zone d\'aper√ßu non trouv√©e:', this.previewSelector);
                throw new Error(`Zone d'aper√ßu configurateur non trouv√©e (${this.previewSelector})`);
            }

            console.log('‚úÖ Zone d\'aper√ßu trouv√©e:', previewElement);

            // ‚ú® NOUVEAU : Pr√©parer les √©l√©ments avant capture
            const originalStates = this.prepareElementsForCapture();

            try {
                // Configuration am√©lior√©e pour capture NFC
                const canvas = await html2canvas(previewElement, {
                    backgroundColor: '#ffffff',
                    scale: 2, // Haute r√©solution pour impression
                    useCORS: true,
                    allowTaint: false,
                    logging: false,
                    width: previewElement.scrollWidth,
                    height: previewElement.scrollHeight,

                    // ‚ú® CORRECTIONS pour les transforms et images
                    ignoreElements: (element) => {
                        // Ignorer les √©l√©ments probl√©matiques
                        return element.classList.contains('screenshot-ignore');
                    },

                    // Pr√©server les transformations
                    foreignObjectRendering: false,
                    imageTimeout: 15000,

                    // ‚ú® CORRECTION principale : onclone callback
                    onclone: (clonedDoc, element) => {
                        console.log('üîß Correction du clone pour screenshot...');

                        // Corriger le logo verso sp√©cifiquement
                        this.fixLogoVersoInClone(clonedDoc);

                        // Corriger autres √©l√©ments transform√©s si n√©cessaire
                        this.fixTransformedElements(clonedDoc);
                    }
                });

                const dataUrl = canvas.toDataURL('image/png', 1.0);
                console.log('‚úÖ Screenshot g√©n√©r√© avec corrections:', dataUrl.length, 'caract√®res');

                return dataUrl;
            } catch (error) {
                console.error('‚ùå Erreur g√©n√©ration screenshot:', error);
                throw new Error(`Erreur capture: ${error.message}`);
            } finally {
                // ‚ú® NOUVEAU : Restaurer les √©tats originaux
                this.restoreElementsAfterCapture(originalStates);
            }
        }

        /**
         * ‚ú® NOUVEAU : Restaure les √©tats apr√®s capture
         */
        restoreElementsAfterCapture(originalStates) {
            console.log('üîÑ Restauration des √©l√©ments apr√®s capture...');

            originalStates.forEach(state => {
                if (state.property === 'style') {
                    state.element.style.cssText = state.value;
                } else {
                    state.element[state.property] = state.value;
                }
            });

            console.log('‚úÖ √âtats restaur√©s');
        }

        /**
         * ‚ú® NOUVEAU : Corrige le logo verso dans le clone HTML2Canvas
         */
        fixLogoVersoInClone(clonedDoc) {
            const clonedLogoVerso = clonedDoc.querySelector('#logoVersoImage');
            if (!clonedLogoVerso || clonedLogoVerso.classList.contains('d-none')) {
                return;
            }

            console.log('üîß Correction logo verso dans clone...');

            // Obtenir le logo original pour r√©f√©rence
            const originalLogo = document.querySelector('#logoVersoImage');
            if (!originalLogo) return;

            // Copier les dimensions calcul√©es du logo original
            const computedStyle = window.getComputedStyle(originalLogo);

            // Appliquer les styles corrig√©s au clone
            clonedLogoVerso.style.transform = 'none';
            clonedLogoVerso.style.width = computedStyle.width;
            clonedLogoVerso.style.height = computedStyle.height;
            clonedLogoVerso.style.objectFit = 'contain';
            clonedLogoVerso.style.objectPosition = 'left';
            clonedLogoVerso.style.maxWidth = 'none';
            clonedLogoVerso.style.maxHeight = 'none';

            console.log('‚úÖ Logo verso corrig√© dans clone:', {
                width: clonedLogoVerso.style.width,
                height: clonedLogoVerso.style.height
            });
        }

        /**
         * ‚ú® NOUVEAU : Corrige d'autres √©l√©ments transform√©s
         */
        fixTransformedElements(clonedDoc) {
            // Corriger d'autres transforms probl√©matiques si n√©cessaire
            const transformedElements = clonedDoc.querySelectorAll('[style*="transform"]');

            transformedElements.forEach(element => {
                const transform = element.style.transform;

                // √âviter les transforms complexes qui cassent la mise en page
                if (transform.includes('matrix') || transform.includes('translate3d')) {
                    console.log('üîß Simplification transform complexe:', transform);

                    // Simplifier ou supprimer les transforms probl√©matiques
                    if (transform.includes('scale(')) {
                        const scaleMatch = transform.match(/scale\(([^)]+)\)/);
                        if (scaleMatch) {
                            element.style.transform = `scale(${scaleMatch[1]})`;
                        }
                    }
                }
            });
        }

        /**
         * ‚ú® NOUVEAU : Pr√©pare les √©l√©ments avant capture
         */
        prepareElementsForCapture() {
            const originalStates = [];

            console.log('üîß Pr√©paration √©l√©ments pour capture...');

            // Sauvegarder et optimiser le logo verso
            const logoVersoImg = document.querySelector('#logoVersoImage');
            if (logoVersoImg && !logoVersoImg.classList.contains('d-none')) {
                const originalStyle = logoVersoImg.style.cssText;
                originalStates.push({
                    element: logoVersoImg,
                    property: 'style',
                    value: originalStyle
                });

                // ‚ú® CORRECTION : Remplacer transform par width/height explicites
                const computedStyle = window.getComputedStyle(logoVersoImg);
                const currentTransform = logoVersoImg.style.transform;

                if (currentTransform && currentTransform.includes('scale(')) {
                    // Extraire le facteur de scale
                    const scaleMatch = currentTransform.match(/scale\(([^)]+)\)/);
                    if (scaleMatch) {
                        const scaleFactor = parseFloat(scaleMatch[1]);

                        // Obtenir les dimensions naturelles
                        const naturalWidth = logoVersoImg.naturalWidth;
                        const naturalHeight = logoVersoImg.naturalHeight;

                        if (naturalWidth && naturalHeight) {
                            // Appliquer les dimensions calcul√©es directement
                            logoVersoImg.style.transform = 'none';
                            logoVersoImg.style.width = Math.round(naturalWidth * scaleFactor) + 'px';
                            logoVersoImg.style.height = Math.round(naturalHeight * scaleFactor) + 'px';
                            logoVersoImg.style.objectFit = 'contain';
                            logoVersoImg.style.objectPosition = 'left';

                            console.log(`üîß Logo verso: scale(${scaleFactor}) ‚Üí ${logoVersoImg.style.width} x ${logoVersoImg.style.height}`);
                        }
                    }
                }
            }

            // Sauvegarder et optimiser d'autres √©l√©ments si n√©cessaire
            const transformedElements = document.querySelectorAll('[style*="transform"]');
            transformedElements.forEach(element => {
                if (element !== logoVersoImg) { // √âviter double traitement
                    const originalStyle = element.style.cssText;
                    originalStates.push({
                        element: element,
                        property: 'style',
                        value: originalStyle
                    });
                }
            });

            return originalStates;
        }

        /**
 * ‚ú® AM√âLIORATION : G√©n√©ration thumbnail optimis√©e
 */
        async generateThumbnail(maxWidth = 300) {
            console.log('üñºÔ∏è G√©n√©ration thumbnail optimis√©e...');

            try {
                // R√©cup√©rer le screenshot full corrig√©
                const fullScreenshot = await this.generateScreenshot();

                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.onload = () => {
                        try {
                            // Cr√©er canvas pour redimensionnement
                            const canvas = document.createElement('canvas');
                            const ctx = canvas.getContext('2d');

                            // ‚ú® AM√âLIORATION : Pr√©server les proportions exactes
                            const aspectRatio = img.height / img.width;
                            canvas.width = maxWidth;
                            canvas.height = Math.round(maxWidth * aspectRatio);

                            // ‚ú® AM√âLIORATION : Interpolation haute qualit√©
                            ctx.imageSmoothingEnabled = true;
                            ctx.imageSmoothingQuality = 'high';

                            // Dessiner image redimensionn√©e
                            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                            // Qualit√© optimis√©e pour web
                            const thumbnail = canvas.toDataURL('image/png', 0.9);
                            console.log('‚úÖ Thumbnail optimis√© g√©n√©r√©:', {
                                dimensions: `${canvas.width}x${canvas.height}`,
                                size: `${thumbnail.length} caract√®res`
                            });

                            resolve(thumbnail);
                        } catch (error) {
                            console.error('‚ùå Erreur cr√©ation thumbnail:', error);
                            reject(error);
                        }
                    };

                    img.onerror = () => {
                        console.error('‚ùå Erreur chargement image pour thumbnail');
                        reject(new Error('Impossible de charger l\'image pour thumbnail'));
                    };

                    img.src = fullScreenshot;
                });
            } catch (error) {
                console.error('‚ùå Erreur g√©n√©ration thumbnail:', error);
                throw error;
            }
        }

        /**
         * G√©n√®re les deux formats (full + thumbnail) en une fois
         */
        async generateBothFormats(thumbnailWidth = 300) {
            console.log('üì∏ G√©n√©ration screenshot complet (full + thumbnail)...');

            try {
                const full = await this.generateScreenshot();
                const thumbnail = await this.generateThumbnail(thumbnailWidth);

                const result = {
                    full: full,
                    thumbnail: thumbnail,
                    generated_at: new Date().toISOString(),
                    dimensions: {
                        full: this.getImageDimensions(full),
                        thumbnail: this.getImageDimensions(thumbnail)
                    }
                };

                console.log('‚úÖ Screenshot complet g√©n√©r√©:', result);
                return result;
            } catch (error) {
                console.error('‚ùå Erreur g√©n√©ration compl√®te:', error);
                throw error;
            }
        }

        /**
         * Utilitaire pour r√©cup√©rer les dimensions d'une image base64
         */
        getImageDimensions(base64Data) {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = () => {
                    resolve({
                        width: img.width,
                        height: img.height
                    });
                };
                img.src = base64Data;
            });
        }

        /**
         * M√©thode de test pour v√©rifier que tout fonctionne
         */
        async testCapture() {
            console.log('üß™ Test de capture...');

            try {
                await this.init();
                const screenshot = await this.generateScreenshot();
                const thumbnail = await this.generateThumbnail();

                console.log('‚úÖ Test r√©ussi!');
                console.log('- Screenshot:', screenshot.length, 'caract√®res');
                console.log('- Thumbnail:', thumbnail.length, 'caract√®res');

                return {
                    success: true,
                    full: screenshot,
                    thumbnail: thumbnail
                };
            } catch (error) {
                console.error('‚ùå Test √©chou√©:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        }
    };

    console.log('üì¶ Module NFCScreenshotCapture d√©fini');
}